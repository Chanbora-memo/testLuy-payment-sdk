This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: node_modules/**
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
config.js
index.js
package.json
README.md
validation.js

================================================================
Files
================================================================

================
File: .gitignore
================
repomix-output.txt

node_modules/
test.js

================
File: config.js
================
// const config = {
//   clientId: process.env.TESTLUY_CLIENT_ID,
//   secretKey: process.env.TESTLUY_SECRET_KEY,
//   baseUrl: process.env.TESTLUY_BASE_URL || "http://localhost:8000/api",
// };

// export const getConfig = (options = {}) => {
//   const clientId = options.clientId || config.clientId;
//   const secretKey = options.secretKey || config.secretKey;
//   const baseUrl = options.baseUrl || config.baseUrl;

//   if (!clientId || !secretKey) {
//     console.warn(
//       "Warning: Client ID or Secret Key is missing. Ensure TESTLUY_CLIENT_ID and TESTLUY_SECRET_KEY environment variables are set."
//     );
//   }

//   return {
//     clientId,
//     secretKey,
//     baseUrl,
//   };
// };

const defaultConfig = { // Only default Base URL here if needed
  baseUrl: process.env.TESTLUY_BASE_URL || "http://localhost:8000/api",
};

export const getConfig = (options = {}) => {
  const clientId = options.clientId; // Get from options, no default from process.env in config
  const secretKey = options.secretKey; // Get from options, no default from process.env in config
  const baseUrl = options.baseUrl || defaultConfig.baseUrl;

  return {
    clientId,
    secretKey,
    baseUrl,
  };
};

================
File: index.js
================
import axios from "axios";
import { getConfig } from "./config.js";
import { validateAmount, validateCallbackUrl, validateTransactionId } from "./validation.js";

/**
 * TestluyPaymentSDK - A payment processing SDK for integrating with the Testluy payment system
 * @class
 * @description Handles payment processing operations including payment URL generation, status checking, and callback handling
 */
class TestluyPaymentSDK {
  constructor(options = {}) {
    const { clientId, secretKey, baseUrl } = getConfig(options);
    if (!clientId || !secretKey) { // Explicitly check for clientId and secretKey
      throw new Error("Client ID and Secret Key are required.");
    }
    this.clientId = clientId;
    this.secretKey = secretKey;
    this.baseUrl = baseUrl;
    this.isValidated = false;
  }

  async init() {
    if (!this.clientId || !this.secretKey) {
      throw new Error("Client ID and Secret Key are required.");
    }
    try {
      this.isValidated = await this.validateCredentials();
      if (!this.isValidated) {
        throw new Error("Invalid credentials");
      }
    } catch (error) {
      console.error("Failed to validate credentials:", error.message);
      throw error;
    }
  }

  async generatePaymentUrl(amount, callbackUrl) {
    try {
      validateAmount(amount);
      validateCallbackUrl(callbackUrl);
      const response = await axios.post(
        `${this.baseUrl}/payment-simulator/generate-url`,
        {
          amount: amount,
          callback_url: callbackUrl,
          client_id: this.clientId,
          secret_key: this.secretKey,
        },
        {
          auth: {
            username: this.clientId,
            password: this.secretKey,
          },
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      return response.data.payment_url;
    } catch (error) {
      console.error(
        "Generate payment URL error:",
        error.response ? error.response.data : error.message
      );
      throw new Error(
        `Failed to generate payment URL: ${
          error.response ? error.response.data.message : error.message
        }`
      );
    }
  }

  async getPaymentStatus(transactionId) {
    try {
      validateTransactionId(transactionId);
      console.log(`Fetching payment status for transaction: ${transactionId}`);
      const response = await axios.get(
        `${this.baseUrl}/payment-simulator/status/${transactionId}`,
        {
          auth: {
            username: this.clientId,
            password: this.secretKey,
          },
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      console.log(`Payment status response:`, response.data);
      return response.data;
    } catch (error) {
      console.error(`Error fetching payment status:`, error);
      throw new Error(`Failed to get payment status: ${error.message}`);
    }
  }

  async validateCredentials() {
    try {
      console.log(`Validating credentials for client ID: ${this.clientId}`);
      const response = await axios.post(
        `${this.baseUrl}/validate-credentials`,
        {},
        {
          auth: {
            username: this.clientId,
            password: this.secretKey,
          },
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      console.log("Validation response:", response.data);
      return response.data.isValid;
    } catch (error) {
      console.error(
        "Validation error:",
        error.response ? error.response.data : error.message
      );
      return false;
    }
  }

  async initiatePaymentFlow(amount, callbackUrl, backUrl) {
    try {
      validateAmount(amount);
      validateCallbackUrl(callbackUrl);
      console.log(
        `Initiating payment flow with amount: ${amount}, callback URL: ${callbackUrl}, and back URL: ${backUrl}`
      );
      const response = await axios.post(
        `${this.baseUrl}/payment-simulator/generate-url`,
        {
          amount,
          callback_url: callbackUrl,
          back_url: backUrl,
        },
        {
          auth: {
            username: this.clientId,
            password: this.secretKey,
          },
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      console.log("Response status:", response.status);
      console.log("Response data:", JSON.stringify(response.data, null, 2));

      const { payment_url, transaction_id } = response.data;

      console.log("Extracted payment_url:", payment_url);
      console.log("Extracted transaction_id:", transaction_id);

      if (!transaction_id) {
        console.error("Transaction ID is missing in the response");
        throw new Error("Transaction ID not returned from the server");
      }

      console.log("Received transaction ID in SDK:", transaction_id);

      const result = {
        paymentUrl: payment_url,
        transactionId: transaction_id,
        backUrl: backUrl,
        handleCallback: this.handlePaymentCallback.bind(this),
      };

      console.log(
        "Returning result from initiatePaymentFlow:",
        JSON.stringify(result, null, 2)
      );

      return result;
    } catch (error) {
      console.error("Error in initiatePaymentFlow:", error.message);
      if (error.response) {
        console.error(
          "Error response data:",
          JSON.stringify(error.response.data, null, 2)
        );
      }
      throw new Error(`Failed to initiate payment flow: ${error.message}`);
    }
  }

  async handlePaymentCallback(callbackData, callbackUrl) {
    try {
      const { transaction_id, status } = callbackData;
      if (!transaction_id) {
        console.error(
          "Transaction ID is undefined in callbackData:",
          callbackData
        );
        throw new Error("Transaction ID is undefined");
      }
      console.log(
        "Handling payment callback for transaction ID:",
        transaction_id
      );
      const paymentStatus = await this.getPaymentStatus(transaction_id);
      return {
        transactionId: transaction_id,
        status: status,
        paymentDetails: paymentStatus,
        callbackUrl: callbackUrl,
      };
    } catch (error) {
      console.error("Error in handlePaymentCallback:", error);
      throw new Error(`Failed to handle payment callback: ${error.message}`);
    }
  }
}

console.log("TestluyPaymentSDK loaded");
export default TestluyPaymentSDK;

================
File: package.json
================
{
  "name": "testluy-payment-sdk",
  "version": "1.0.20",
  "description": "SDK for TestLuy Payment Simulator",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "test": "node test.js"
  },
  "keywords": [
    "payment",
    "simulator",
    "sdk"
  ],
  "author": "Chanbora Seng",
  "license": "MIT",
  "dependencies": {
    "axios": "^1.7.3",
    "dotenv": "^16.4.7",
    "joi": "^17.13.3"
  },
  "devDependencies": {
    "jest": "^29.7.0"
  }
}

================
File: README.md
================
# Testluy Payment Simulator SDK

This SDK provides easy integration with the Testluy Payment Simulator.

## Installation

```bash
npm install testluy-payment-sdk
```

## Usage
```javascript
const TestluyPaymentSDK = require('testluy-payment-sdk');
const sdk = new TestluyPaymentSDK('your-client-id', 'your-secret-key', 'http://your-api-base-url');
// Generate a payment URL
sdk.generatePaymentUrl(20.00, 'your-application-id', 'https://your-callback-url.com')
.then(paymentUrl => {
console.log('Payment URL:', paymentUrl);
})
.catch(error => {
console.error('Error:', error.message);
});
// Get payment status
sdk.getPaymentStatus('transaction-id')
.then(status => {
console.log('Payment Status:', status);
})
.catch(error => {
console.error('Error:', error.message);
});
```

## API Reference

### generatePaymentUrl(amount, applicationId, callbackUrl)

Generates a payment URL for the given amount and application.

### getPaymentStatus(transactionId)

Retrieves the status of a payment for the given transaction ID.

================
File: validation.js
================
import Joi from 'joi';

const amountSchema = Joi.number().positive().required().messages({
  'number.base': '"amount" must be a number',
  'number.positive': '"amount" must be a positive number',
  'any.required': '"amount" is required'
});

const callbackUrlSchema = Joi.string().uri().required().messages({
  'string.base': '"callbackUrl" must be a string',
  'string.uri': '"callbackUrl" must be a valid URI',
  'any.required': '"callbackUrl" is required'
});

const transactionIdSchema = Joi.string().required().messages({
  'string.base': '"transactionId" must be a string',
  'any.required': '"transactionId" is required'
});

export const validateAmount = (amount) => {
  const { error } = amountSchema.validate(amount);
  if (error) {
    throw new Error(error.details[0].message);
  }
};

export const validateCallbackUrl = (callbackUrl) => {
  const { error } = callbackUrlSchema.validate(callbackUrl);
  if (error) {
    throw new Error(error.details[0].message);
  }
};

export const validateTransactionId = (transactionId) => {
    const { error } = transactionIdSchema.validate(transactionId);
    if (error) {
      throw new Error(error.details[0].message);
    }
  };



================================================================
End of Codebase
================================================================
